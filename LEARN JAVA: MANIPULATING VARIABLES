<h2>Compound Assignment Operators </h2>

Sometimes, we need to adjust the value of a variable.

Imagine we’re working at a bake sale and want to keep track of how many cupcakes we have by creating a variable called numCupcakes:

int numCupcakes = 12;

If we baked 8 more cupcakes, we know that we could update our variable using the + operator:

numCupcakes = numCupcakes + 8; // Value is now 20

While this method works just fine, we had to write our variable numCupcakes twice. We can shorten this syntax by using a compound assignment operator.

Compound assignment operators perform an arithmetic operation on a variable and then reassigns its value. Using the += compound assignment operator, we can rewrite our previous code like so:

numCupcakes += 8; // Value is now 20

Now we only need to reference numCupcakes once.

We can use compound assignment operators for all of the arithmetic operators we’ve covered:

Addition (+=)
Subtraction (-=)
Multiplication (*=)
Division (/=)
Modulo (%=)






Order of Operations

If we were to place multiple operators in a single expression, what operation would the compiler evaluate first?

int num = 5 * (10 - 4) + 4 / 2;

The order of operations dictates the order in which an expression (like the one above) is evaluated. Operators that share the same precedence are evaluated from Left-to-Right within the expression.

The order is as follows:

Parentheses
Exponents
Modulo/Multiplication/Division
Addition/Subtraction
With this new information in mind, let’s dissect the expression from above so that we can find the value of num:

5 * (10 - 4) + 4 / 2

10 - 4 would be evaluated first because it is wrapped in parentheses. This value would become 6 making our expression look like this:

5 * 6 + 4 / 2 

Next, 5 * 6 will be evaluated because of the * operator. This value is 30. Our expression now looks like this:

30 + 4 / 2

Following the order of operations, 4 / 2 will be evaluated next because the division operator / has higher precedence than the addition operator +. Our expression now resembles the following:

30 + 2

30 + 2 is 32. This means that the value of num is 32.








Greater Than and Less Than
9 min
Now, we’re withdrawing money from our bank account program, and we want to see if we’re withdrawing less money than what we have available.

Java has relational operators for numeric datatypes that make boolean comparisons. These include less than (<) and greater than (>), which help us solve our withdrawal problem.

double balance = 20000.01;
double amountToWithdraw = 5000.01;
System.out.print(amountToWithdraw < balance);
//this will print true, since amountToWithdraw is less than balance

You can save the result of a comparison as a boolean, which you learned about in the last lesson.

double myBalance = 200.05;
double costOfBuyingNewLaptop = 1000.05;
boolean canBuyLaptop = myBalance > costOfBuyingNewLaptop;
//canBuyLaptop is false, since 200.05 is not more than 1000.05





Equals and Not Equals
7 min
So how would we validate our paycheck to see if we got paid the right amount?

We can use another relational operator to do this. == will tell us if two variables are equal:

double paycheckAmount = 620;
double calculatedPaycheck = 15.50 * 40;

System.out.print(paycheckAmount == calculatedPaycheck);
// This will print true, since paycheckAmount equals calculatedPaycheck

Notice that the equality check is two equal signs, instead of one. One equal sign, =, is how we assign values to variables! It’s easy to mix these up, so make sure to check your code for the right number of equal signs.

To check if two variables are not equal, we can use !=:

double balance = 20000.0;
double amountToDeposit = 620;
double updatedBalance = balance + amountToDeposit;

boolean balanceHasChanged = balance != updatedBalance;
// balanceHasChanged holds true, since balance does not equal updatedBalance








Greater/Less Than or Equal To
6 min
How could we make sure we got paid at least the amount we expected in our paycheck? We could use greater than or equal to, >=, or less than or equal to, <=.

double paycheckAmount = 620;
double calculatedPaycheck = 15.50 * 40;
System.out.println(paycheckAmount >= calculatedPaycheck);
//this will print true, since paycheckAmount equals calculatedPaycheck










.equals()
4 min
So far, we’ve only been using operations on primitive types. It doesn’t make much sense to multiply Strings, or see if one String is less than the other. But what if we had two users logging into a site, and we wanted to see if their usernames were the same?

With objects, such as Strings, we can’t use the primitive equality operator. To test equality with objects, we use a built-in method called .equals(). When comparing objects, make sure to always use .equals(). == will work occasionally, but the reason why it sometimes works has to do with how objects are stored in memory.

For the purposes of this lesson (as well as good practice) remember to use .equals() instead of == when comparing objects.

To use it, we call it on one String, by using ., and pass in the String to compare against in parentheses:

String person1 = "Paul";
String person2 = "John";
String person3 = "Paul";

System.out.println(person1.equals(person2));
// Prints false, since "Paul" is not "John"

System.out.println(person1.equals(person3));
// Prints true, since "Paul" is "Paul"








String Concatenation
8 min
We have covered a lot of built-in functionality in Java throughout this lesson. We’ve seen +, -, <, ==, and many other operators. Most of these only work on primitives, but some work on Strings too!

Let’s say we want to print out a variable, and we want to describe it as we print it out. For our bank account example, imagine we want to tell the user:

Your username is: <username>

With the value of the variable username displayed.

The + operator, which we used for adding numbers together, can be used to concatenate Strings. In other words, we can use it to join two Strings together!

String username = "PrinceNelson";
System.out.println("Your username is: " + username);

This code will print:

Your username is: PrinceNelson

We can even use a primitive datatype as the second variable to concatenate, and Java will intelligently make it a String first:

int balance = 10000;
String message = "Your balance is: " + balance;
System.out.println(message);

This code will print:

Your balance is: 10000





final Keyword
3 min
Throughout this lesson, we’ve discussed the different ways we can manipulate a variable; however, what do we do with a variable that should never change its value?

For example, the year we were born will always stay the same. There’s no way we can change that information. A value like this in our code should be unchangeable.

To declare a variable with a value that cannot be manipulated, we need to use the final keyword. To use the final keyword, prepend final to a variable declaration like so:

final int yearBorn = 1968;

When we declare a variable using final, the value cannot be changed; any attempts at doing so will cause an error to occur:

error: cannot assign a value to final variable yearBorn







<h3>Review</h3>

What’s the use of having variables if you can’t do anything with them? We’ve now seen some ways you can operate on variables and compare them. The possibilities are endless!

We covered:

Addition and subtraction, using + and -
Multiplication and division, using * and /
The modulo operator for finding remainders, %
Compound assignment operators +=, -=, *=, /=, and %=.
The order of operations: parentheses -> exponents -> multiplication, division, modulo -> addition, subtraction
Greater than, >, and less than, <
Equal to, ==, and not equal to, !=
Greater than or equal to, >=, and less than or equal to, <=
equals() for comparing Strings and other objects
Using + to concatenate Strings
The final keyword which makes variables unchangeable
Practice some of these concepts here, to make sure you have a solid foundation for learning more complicated and exciting Java concepts!











